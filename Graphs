##get hold of editing features
fig, ax = plt.subplots()
#set size
fig.set_size_inches(8,12)

##set graph 
sns.heatmap(pd.crosstab(df.gender, df.speak_up, normalize='index'), cmap="YlGnBu", annot=True, cbar=False)



##Run multiple scatterplot with a y-specific column picking only numberic variables as your X
df_num = df.select_dtypes(include = ['float64', 'int64'])
df_num = df_num[df_num['Number of workers']<60000]
df_num = df_num[df_num['Paid above monthly (%)']<101]
for i in range(0, len(df_num.columns), 5):
    sns.pairplot(data=df_num,
                x_vars=df_num.columns[i:i+5],
                y_vars=["Number of findings (total)"])

##Subplots!
#Different axis
plt.style.use('seaborn-white')
df_s = df_num[df_num['Number of workers']<100 ]
df_m = df_num[(df_num['Number of workers']>=100) & (df_num['Number of workers']< 500)]
df_l = df_num[df_num['Number of workers']>=500]
plt.rc('xtick', labelsize=15) 
plt.rc('ytick', labelsize=15) 

fig, (ax1 , ax2, ax3) = plt.subplots(nrows=1, ncols=3,  figsize=(24, 8), sharex=True, sharey=True)


ax1.scatter(x=df_s['Required_Staff_Days__c'], y=df_s["Number of findings (total)"], s = 75, alpha = 0.5, c = 'skyblue')
ax1.set_title('Small factories: workers 1-100', fontsize = 20)
ax1.spines['right'].set_visible(False)
ax1.spines['top'].set_visible(False)

ax2.scatter(x=df_m['Required_Staff_Days__c'], y=df_m["Number of findings (total)"], s = 75, alpha = 0.5, c = 'lightseagreen')
ax2.set_title('Medium factories: workers 101-500', fontsize = 20)
ax2.spines['right'].set_visible(False)
ax2.spines['top'].set_visible(False)

ax3.scatter(x=df_l['Required_Staff_Days__c'], y=df_l["Number of findings (total)"], s = 75, alpha = 0.5)
ax3.set_title('Large factories: workers>501', fontsize = 20)
ax3.spines['right'].set_visible(False)
ax3.spines['top'].set_visible(False)

fig.text(0.5, 0.001, 'Number of Staff Required', fontsize = 20, ha='center')
fig.text(0.001, 0.5, 'Number of violations in factory',  fontsize = 20, va='center', rotation='vertical')
fig.text(0.5, 1, 'Relationship between n. of auditing staff and number of violations encountered in factory', fontsize = 25, ha='center')


#####Trendline in a WIDE dataset 

tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),    
             (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),    
             (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),    
             (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),    
             (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]    
for i in range(len(tableau20)):    
    r, g, b = tableau20[i]    
    tableau20[i] = (r / 255., g / 255., b / 255.)    
  

plt.figure(figsize=(12, 14))    

plt.ylim(0, 15)   

# Remove the plot frame lines. They are unnecessary chartjunk.    
ax = plt.subplot(111)    
ax.spines["top"].set_visible(False)    
ax.spines["bottom"].set_visible(False)    
ax.spines["right"].set_visible(False)    
ax.spines["left"].set_visible(False)    

  
# Ensure that the axis ticks only show up on the bottom and left of the plot.    
# Ticks on the right and top of the plot are generally unnecessary chartjunk.    
ax.get_xaxis().tick_bottom()    
ax.get_yaxis().tick_left()    

majors = ['Number of findings (total)', 'Business Ethics Findings', 'Labour Standards Findings', ]

for rank, column in enumerate(majors):    
    plt.plot(monthly_df.argrc__End_Date__c.values, monthly_df[column.replace("\n", " ")].values,    
            lw=2.5, color=tableau20[rank], label = column)    
    leg = ax.legend()
 
 
 
##Adding fonts 
 
import matplotlib.font_manager
from IPython.core.display import HTML

def make_html(fontname):
    return "<p>{font}: <span style='font-family:{font}; font-size: 24px;'>{font}</p>".format(font=fontname)

code = "\n".join([make_html(font) for font in sorted(set([f.name for f in matplotlib.font_manager.fontManager.ttflist]))])

HTML("<div style='column-count: 2;'>{}</div>".format(code))
  
